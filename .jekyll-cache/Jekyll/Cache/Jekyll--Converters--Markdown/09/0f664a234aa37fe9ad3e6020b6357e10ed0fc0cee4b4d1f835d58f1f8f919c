I"=(<p>토비의 스프링 책의 실습 및 정리</p>
<ul>
  <li>실습 내용 : 1.4 제어의 역전(IoC)</li>
  <li>실습 환경 : Eclipse / Mac OS</li>
</ul>

<h2 id="오브젝트-팩토리">오브젝트 팩토리</h2>
<p>이전 초난감 DAO를 깔끔하게 리팩토링하는 과정에서 UserDaoTest 에 어떤 ConnectionMaker 구현 클래스를 사용할지 결정하는 기능이 포함되었다</p>

<p>UserDaoTest의 본래 목적은 UserDao의 기능이 잘 동작하는지 테스트하려는 것
-&gt; 분리!
-&gt; UserDao와 ConnectionMaker 구현 클래스의 오브젝트를 만드는 것과, 그렇게 만들어진 두 개의 오브젝트가 연결돼서 사용될 수 있도록 관계를 맺어주는 기능</p>

<dl>
  <dt>분리될 클래스 역할</dt>
  <dd>객체의 생성 방법을 결정하고 그렇게 만들어진 오브젝트를 돌려주는 것
-&gt; 이런 일을 하는 오브젝트를 <code class="highlighter-rouge">팩토리(factory)</code> 라고 함</dd>
</dl>

<p>팩토리 역할을 맡을 클래스</p>
<ul>
  <li>Package : springbook.user.dao</li>
  <li>Name : DaoFactory</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DaoFactory</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="nc">UserDao</span> <span class="nf">userDao</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">ConnectionMaker</span> <span class="n">connectionMaker</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DConnectionMaker</span><span class="o">();</span>
		<span class="nc">UserDao</span> <span class="n">userDao</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">UserDao</span><span class="o">(</span><span class="n">connectionMaker</span><span class="o">);</span>
		<span class="k">return</span> <span class="n">userDao</span><span class="o">;</span>
	<span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>
<p>-&gt; UserDao, ConnectionMaker 관련 생성 작업</p>

<ul>
  <li>UserDaoTest 수정</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoTest</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">ClassNotFoundException</span><span class="o">,</span> <span class="nc">SQLException</span> <span class="o">{</span>

		<span class="nc">UserDao</span> <span class="n">dao</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DaoFactory</span><span class="o">().</span><span class="na">userDao</span><span class="o">();</span>
		<span class="o">...</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>-&gt; DaoFactory에 요청해서 미리 만들어진 UserDao 오브젝트 가져오기</p>

<p>만약, DaoFactory에 UserDao 외의 다른 DAO의 생성 기능을 넣는다면?</p>
<ul>
  <li>AccountDao, MessageDao 등을 만든다면?</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DaoFactory</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="nc">UserDao</span> <span class="nf">userDao</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="k">new</span> <span class="nf">UserDao</span><span class="o">(</span><span class="k">new</span> <span class="nc">DConnectionMaker</span><span class="o">());</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="nc">AccountDao</span> <span class="nf">accountDao</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="k">new</span> <span class="nf">AccountDao</span><span class="o">(</span><span class="k">new</span> <span class="nc">DConnectionMaker</span><span class="o">());</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="nc">MessageDao</span> <span class="nf">messageDao</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="k">new</span> <span class="nf">MessageDao</span><span class="o">(</span><span class="k">new</span> <span class="nc">DConnectionMaker</span><span class="o">());</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>-&gt; ConnectionMaker 구현 클래스의 오브젝트를 생성하는 코드가 메소드마다 반복 됨
-&gt; 어떤 ConnectionMaker 구현 클래스를 사용할지를 결정하는 기능이 중복</p>

<p>-&gt; 분리!</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DaoFactory</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="nc">UserDao</span> <span class="nf">userDao</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="k">new</span> <span class="nf">UserDao</span><span class="o">(</span><span class="n">connectionMaker</span><span class="o">());</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="nc">AccountDao</span> <span class="nf">accountDao</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="k">new</span> <span class="nf">AccountDao</span><span class="o">(</span><span class="n">connectionMaker</span><span class="o">());</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="nc">MessageDao</span> <span class="nf">messageDao</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="k">new</span> <span class="nf">MessageDao</span><span class="o">(</span><span class="n">connectionMaker</span><span class="o">());</span>
	<span class="o">}</span>

	<span class="c1">// DB 연결 기능 분리</span>
	<span class="kd">public</span> <span class="nc">ConnectionMaker</span> <span class="nf">connectionMaker</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="k">new</span> <span class="nf">DConnectionMaker</span><span class="o">();</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="제어의-역전">제어의 역전</h2>

<p>일반적으로 프로그램의 흐름은 main() 메소드와 같이 프로그램이 시작되는 지점에서 다음에 사용할 오브젝트를 결정하고, 결정한 오브젝트를 생성하고, 만들어진 오브젝트에 있는 메소드를 호출하는 등의 작업이 반복됨</p>

<p>이런 프로그램 구조에서 각 오브젝트는 프로그램 흐름을 결정하거나 사용할 오브젝트를 구성하는 작업에 <strong>능동적</strong>으로 참여함</p>

<p>초기 UserDao
-&gt; 테스트 용 main() 메소드는 UserDao 클래스의 오브젝트를 직접 생성하고, 만들어진 오브젝트 메소드를 사용함. UserDao 또한 자신이 사용할 ConnectionMaker의 구현 클래스(Ex. DConnectionMaker)를 자신이 결정하고, 그 오브젝트를 필요한 시점에서 생성하고, 각 메소드에서 이를 사용
-&gt; 모든 오브젝트가 능동적으로 자신이 사용할 클래스를 결정하고, 언제 어떻게 그 오브젝트를 만들지 스스로 관장
-&gt; 모든 종류의 작업을 사용하는 쪽에서 제어하는 구조</p>

<dl>
  <dt><strong>IoC</strong> Inversion of Control</dt>
  <dd>프로그램의 제어 흐름 구조가 바뀌는 것</dd>
  <dd>오브젝트가 자신이 사용할 오브젝트를 스스로 선택하지 않으며 생성하지도 않음, 자신도 어떻게 만들어지고 어디서 사용되는지 알 수 없음
-&gt; 모든 제어 권한을 자신이 아닌 다른 대상에게 위임했기 때문</dd>
</dl>

<p>예.</p>
<ul>
  <li>
    <p>서블릿, JSP, EJB
; 서블릿을 개발해서 서버에 배포할 수는 있으나, 그 실행을 개발자가 직접 제어할 수는 없음
-&gt; 서블릿에 대한 제어 권한을 가진 컨테이너가 적절한 시점에 서블릿 클래스의 오브젝트를 만들고 그 안의 메소드를 호출 함
; 컨테이너 안에서 동작하는 구조</p>
  </li>
  <li>
    <p>[디자인 패턴] 템플릿 메소드
; 제어권을 상위 템플릿 메소드에 넘기고 자신은 필요할 때 호출되어 사용되도록 함</p>
  </li>
  <li>
    <p>프레임워크
; 제어의 역전 개념이 적용된 대표적인 기술
; 어플리케이션 코드가 프레임워크에 의해 수동적으로 동작
-&gt; 프레임워크 위에 개발한 클래스를 등록해두고, 프레임워크가 흐름을 주도하는 중에 개발자가 만든 애플리케이션 코드를 사용하도록 만드는 방식</p>
  </li>
  <li>
    <p>DaoFactory
-&gt; IoC 가 적용됨
; ConnectionMaker 구현 클래스를 만들고 사용할지를 결정할 권한
; UserDao 은 팩토리에 의해 수동적으로 만들어지며 사용할 오브젝트 또한 DaoFactory 가 공급해주는 것을 수동적으로 사용
; UserDaoTest 는 DaoFactory 가 만들고 초기화해서 사용하도록 공급해주는 ConnectionMaker를 사용
; UserDao와 ConnectionMaker의 구현체를 생성하는 책임</p>
  </li>
</ul>

<dl>
  <dt><strong>IoC 의 장점</strong></dt>
  <dd>설계가 깔끔해지고 유연성이 증가하며 확장성이 좋아짐</dd>
</dl>

<p>::제어의 역전::에서는 프레임워크 또는 컨테이너와 같이 애플리케이션 컴포넌트의 생성과 관계설정, 사용, 생명주기 관리 등을 관장하는 존재가 필요함</p>

<p>스프링은 IoC를 모든 기능의 기초가 되는 기반기술로 삼고 있으며, IoC를 적용하고 있는 프레임워크</p>
:ET